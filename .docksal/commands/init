#!/usr/bin/env bash

## Initialize a Docksal powered Drupal 8 site
##
## Usage: fin init

# Abort if anything fails
set -e

#-------------------------- Settings --------------------------------

# PROJECT_ROOT is passed from fin.
# The following variables are configured in the '.env' file: DOCROOT, VIRTUAL_HOST.
SITE_DIRECTORY="default"
DOCROOT_PATH="${PROJECT_ROOT}"
SITEDIR_PATH="${DOCROOT_PATH}/sites/${SITE_DIRECTORY}"
DATABASE_DIR="${SITEDIR_PATH}/db/"


#-------------------------- END: Settings --------------------------------

#-------------------------- Helper functions --------------------------------

# Console colors
red='\033[0;31m'
green='\033[0;32m'
green_bg='\033[42m'
yellow='\033[1;33m'
NC='\033[0m'

echo-red () { echo -e "${red}$1${NC}"; }
echo-green () { echo -e "${green}$1${NC}"; }
echo-green-bg () { echo -e "${green_bg}$1${NC}"; }
echo-yellow () { echo -e "${yellow}$1${NC}"; }


is_linux ()
{
	uname | grep 'Linux' >/dev/null
}

is_windows ()
{
	local res=$(uname | grep 'CYGWIN_NT')
	if [[ "$res" != "" ]]; then
		return 0
	else
		return 1
	fi
}

# Copy a settings file.
# Skips if the destination file already exists.
# @param $1 source file
# @param $2 destination file
copy_settings_file()
{
	local source="$1"
	local dest="$2"

	if [[ ! -f $dest ]]; then
		echo-green "Copying ${dest}..."
		cp $source $dest
	else
		echo-yellow "${dest} already in place."
	fi
}

create_temp_database_directory()
{
    if [[ ! -d "${SITEDIR_PATH}/db" ]]; then
		echo-green "Creating db folder in ${SITEDIR_PATH}/db..."
		mkdir "${DATABASE_DIR}"
	else
		echo-yellow "${DATABASE_DIR} already in place."
	fi
}

create_files_directory()
{
    if [[ ! -d "${SITEDIR_PATH}/files" ]]; then
		echo-green "Creating db folder in ${SITEDIR_PATH}/db..."
		mkdir "${SITEDIR_PATH}/files"
	else
		echo-yellow "${SITEDIR_PATH}/files already in place."
	fi
}

#-------------------------- END: Helper functions --------------------------------

#-------------------------- Functions --------------------------------

# Initialize local settings files
init_settings ()
{
	# Copy from settings templates
	copy_settings_file "${DOCROOT_PATH}/.docksal/etc/default.settings.local.php" "${SITEDIR_PATH}/settings.local.php"
}

# Fix file/folder permissions
fix_permissions ()
{
	echo-green "Making site directory writable..."
	chmod 755 "${SITEDIR_PATH}"
}

# Import database from Pantheon
import_database ()
{


 echo -e "Do you wish to ${green_bg}CREATE${NC} a new ${green_bg}DATABASE${NC} backup from Pantheon ${green_bg}[${PANTHEON_SITE}.${SITE_ENV}]${NC}? (You can still download the latest if you choose No)"
 select yn in "Yes" "No"; do
     case $yn in
         Yes ) if is_linux; then
                 ~/vendor/bin/terminus backup:create ${PANTHEON_SITE}.${SITE_ENV} --element=db;
              else
                  terminus backup:create ${PANTHEON_SITE}.${SITE_ENV} --element=db;
              fi
              break;;

         No ) break;;
     esac
 done

  echo -e "Do you wish to ${green_bg}DOWNLOAD${NC} and ${green_bg}IMPORT${NC} the latest ${green_bg}DATABASE${NC} backup from Pantheon ${green_bg}[${PANTHEON_SITE}.${SITE_ENV}]${NC}?"
  select yn in "Yes" "No"; do
      case $yn in
          Yes )
                if is_linux; then
                    rm -rf  ${DATABASE_DIR}/*;
                    ~/vendor/bin/terminus backup:get ${PANTHEON_SITE}.${SITE_ENV} --element=db --to="${DATABASE_DIR}${PANTHEON_SITE}_${SITE_ENV}.sql.gz";
                else
                    terminus backup:get ${PANTHEON_SITE}.${SITE_ENV} --element=db --to="${DATABASE_DIR}${PANTHEON_SITE}_${SITE_ENV}.sql.gz";
                fi

                echo-green "${DATABASE_DIR}${PANTHEON_SITE}_${SITE_ENV}.sql.gz Created...";
                echo-green "Extracting...";
                gunzip "${DATABASE_DIR}${PANTHEON_SITE}_${SITE_ENV}.sql.gz";
                echo-green "Importing...";
                fin db import "${DATABASE_DIR}${PANTHEON_SITE}_${SITE_ENV}.sql";
                echo-green "Clearing caches...";
                fin drush cr;
                break;;
          No ) break;;
      esac
  done
}

# Import files from Pantheon
import_files ()
{

 echo -e "Do you wish to ${green_bg}CREATE${NC} a new ${green_bg}FILES${NC} backup from Pantheon ${green_bg}[${PANTHEON_SITE}.${SITE_ENV}]${NC}? (You can still download the latest if you choose No)"
 select yn in "Yes" "No"; do
     case $yn in
         Yes )
             if is_linux; then
                 ~/vendor/bin/terminus backup:create ${PANTHEON_SITE}.${SITE_ENV} --element=files;
             else
                 terminus backup:create ${PANTHEON_SITE}.${SITE_ENV} --element=files;
             fi
             break;;
         No ) break;;
     esac
 done

  echo -e "Do you wish to ${green_bg}DOWNLOAD${NC} and ${green_bg}IMPORT${NC} the latest ${green_bg}FILES${NC} backup from Pantheon ${green_bg}[${PANTHEON_SITE}.${SITE_ENV}]${NC}?"
  select yn in "Yes" "No"; do
      case $yn in
          Yes )

                if is_linux; then
                   rm -rf  ${DATABASE_DIR}/*;
                   ~/vendor/bin/terminus backup:get ${PANTHEON_SITE}.${SITE_ENV} --element=files --to="${DATABASE_DIR}${PANTHEON_SITE}_${SITE_ENV}_files.tar.gz";
                else
                   terminus backup:get ${PANTHEON_SITE}.${SITE_ENV} --element=files --to="${DATABASE_DIR}${PANTHEON_SITE}_${SITE_ENV}_files.tar.gz";
                fi
                echo-green "${DATABASE_DIR}${PANTHEON_SITE}_${SITE_ENV}_files.tar.gz Created...";
                echo-green "Extracting...";
                tar -zxvf "${DATABASE_DIR}${PANTHEON_SITE}_${SITE_ENV}_files.tar.gz" -C ${DATABASE_DIR};
                echo-green "Copying...";
                cp -r ${DATABASE_DIR}files_${SITE_ENV}/* ${SITEDIR_PATH}/files/;
                echo-green "Clearing caches...";
                fin drush cr;
                break;;
          No ) break;;
      esac
  done
}


# install Clamav
install_clamav ()
{

 echo -e "Do you wish to ${green_bg}Install${NC} a new ${green_bg}CLAMAV${NC} ? (You can still install the latest if you choose No)"
 select yn in "Yes" "No"; do
     case $yn in
         Yes )
             fin exec sudo apt-get update && sudo apt-get upgrade -y ;
             fin exec sudo apt-get install clamav clamav-daemon -y ;
             fin exec sudo freshclam ;
             break;;
         No ) break;;
     esac
 done



}

install_libsaml8 ()
{

 echo -e "Do you wish to ${green_bg}Install${NC} a new ${green_bg}libsaml8${NC} ? (You can still install the latest if you choose No)"
 select yn in "Yes" "No"; do
     case $yn in
         Yes )
             fin exec sudo apt-get install libsaml8 -y ;
             break;;
         No ) break;;
     esac
 done



}


#-------------------------- END: Functions --------------------------------

#-------------------------- Execution --------------------------------

if [[ "$PROJECT_ROOT" == "" ]]; then
	echo-red "\$PROJECT_ROOT is not set"
	exit 1
fi

# Project initialization steps
echo -e "${green_bg} Step 1 ${NC}${green} Initializing local project configuration...${NC}"
fix_permissions
init_settings

if [[ $DOCKER_RUNNING == "true" ]]; then
	echo -e "${green_bg} Step 2 ${NC}${green} Restarting services...${NC}"
	fin restart
else
	echo -e "${green_bg} Step 2 ${NC}${green} Creating services...${NC}"
	fin up
fi

echo -e "${green_bg} Step 3 ${NC}${green} Database and files...${NC}"

create_temp_database_directory
time import_database
create_files_directory
time import_files
time install_clamav
time install_libsaml8

if is_windows; then
	echo-green "Add ${VIRTUAL_HOST} to your hosts file (/etc/hosts), e.g.:"
	echo-green "192.168.64.100 ${VIRTUAL_HOST}"
	echo
fi

echo -en "${green_bg} DONE! ${NC} "
echo -e "Open ${yellow}http://${VIRTUAL_HOST}${NC} in your browser to verify the setup."

#-------------------------- END: Execution --------------------------------
